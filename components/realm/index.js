import {FenceGroup} from "../models/fence-group";import {Judger} from "../models/judger";import {Spu} from "../../models/spu"import {Cell} from "../models/cell"import {Cart} from "../../models/cart"Component({    properties: {        spu: Object,        orderWay: String    },    data: {        fences: Array,        judger: Object,        previewImg: String,        title: String,        price: String,        discountPrice: String,        stock: String,        // 表示是否有规格        noSpec: Boolean,        // 是否选择了完整的sku        skuIntact: Boolean,        //        currentValues: Array,        //        missingKeys: Array,        outStock: Boolean,        // 用户购买的商品数量        currentSkuCount: Cart.SKU_MIN_COUNT    },    observers: {        'spu': function (spu) {            if (!spu) {                return            }            if (Spu.isNoSpec(spu)) {                // 无规格                this.processNoSpec(spu)            } else {                // 有规格                this.processHasSpec(spu)            }            this.triggerSpecEvent()        }    },    methods: {        processNoSpec(spu) {            this.setData({                noSpec: true,            })            this.bindSkuData(spu.sku_list[0])            //            this.setStockStatus(spu.sku_list[0].stock, this.data.currentSkuCount)        },        processHasSpec(spu) {            const fenceGroup = new FenceGroup(spu)            fenceGroup.initFences()            const judger = new Judger(fenceGroup)            this.data.judger = judger            const defaultSku = fenceGroup.getDefaultSku()            if (defaultSku) {                this.bindSkuData(defaultSku)                //                this.setStockStatus(defaultSku.stock, this.data.currentSkuCount)            } else {                this.bindSpuData()            }            this.bindTipData()            this.bindFenceGroupData(fenceGroup)        },        //        triggerSpecEvent() {            const noSpec = Spu.isNoSpec(this.properties.spu)            if (noSpec) {                this.triggerEvent('specChange', {                    noSpec                })            } else {                this.triggerEvent('specChange', {                    noSpec: Spu.isNoSpec(this.properties.spu),                    skuIntact: this.data.judger.isSkuIntact(),                    currentValues: this.data.judger.getCurrentValues(),                    missingKeys: this.data.judger.getMissingKeys()                })            }        },		    /**	     * 立即购买或者加入购入车	     * 有规格与无规格情况不同	     * */	    onBuyOrCart(event) {	    	if (Spu.isNoSpec(this.properties.spu)) {	    	    this.shoppingNoSpec()		    } else {	    		this.shoppingVarious()		    }	    },	    	    /**	     * 有sku	     * */	    shoppingVarious() {	    	// 是否确定了一个完整的sku	    	const isIntact = this.data.judger.isSkuIntact()		    if (!isIntact) { // 如果没有确定完整的sku		        const missKeys = this.data.judger.getMissingKeys()			    wx.showToast({				    icon: "none",				    title: `请选择: ${missKeys.join(', ')}`,				    duration: 3000			    })		    } else { // 如果确定了完整的sku			    this._triggerShoppingEvent(this.data.judger.getDeterminateSku())		    }	     	    },	    	    /**	     * 无sku	     * */	    shoppingNoSpec() {	    	this._triggerShoppingEvent(this.getNoSpecSpu())	    },	    	    getNoSpecSpu() {		    return this.properties.spu.sku_list[0]	    },	    	    _triggerShoppingEvent(sku) {        	this.triggerEvent('shopping', {        		orderWay: this.properties.orderWay,		        spuId: this.properties.spu.id,		        sku: sku,		        skuCount: this.data.currentSkuCount	        })	    },        // 如果默认spu不存在        bindSpuData() {            const spu = this.properties.spu            this.setData({                previewImg: spu.img,                title: spu.title,                price: spu.price,                discountPrice: spu.discount_price,            })        },        // 如果默认spu存在        bindSkuData(sku) {            this.setData({                previewImg: sku.img,                title: sku.title,                price: sku.price,                discountPrice: sku.discount_price,                stock: sku.stock,            })        },        bindTipData() {            this.setData({                skuIntact: this.data.judger.isSkuIntact(),                currentValues: this.data.judger.getCurrentValues(),                missingKeys: this.data.judger.getMissingKeys()            })        },        bindFenceGroupData(fenceGroup) {            this.setData({                fences: fenceGroup.fences,            })        },        //        setStockStatus(stock, currentCount) {            this.setData({                outStock: this.isOutOfStock(stock, currentCount)            })        },        // 库存量 当前用户购买的数量        isOutOfStock(stock, currentCount) {            return stock < currentCount        },        //        onSelectCount(event) {            const currentCount = event.detail.count            this.setData({                currentSkuCount: currentCount            })            if (this.data.judger.isSkuIntact()) {                const sku = this.data.judger.getDeterminateSku()                this.setStockStatus(sku.stock, currentCount)            }        },        onCelltap(event) {            const data = event.detail.cell            const x = event.detail.x            const y = event.detail.y            //            const cell = new Cell(data.spec)            cell.status = data.status            const judger = this.data.judger            judger.judge(cell, x, y)            // 点击之后, 上半部数据处理            const skuIntact = judger.isSkuIntact()            if (skuIntact) {                // 产生了完整的sku的情况下, 上半部分数据需要改变                const currentSku = judger.getDeterminateSku()                this.bindSkuData(currentSku)                // 判断库存量与购买量的关系                this.setStockStatus(currentSku.stock, this.data.currentSkuCount)            }            this.bindTipData()            this.bindFenceGroupData(judger.fenceGroup)            this.triggerSpecEvent()        }    }})